import type { Wish } from "Wish"

import Thread from "Thread"
import { Wish } from "Wish"



type Connection = Connection
export type Connection

type SqliteError = SqliteError(Integer, String)

export type SqliteValue
  = BlobValue(String)
  | IntegerValue(Integer)
  | NullValue
  | RealValue(Float)
  | TextValue(String)

setTimeout :: ({} -> {}) -> Integer -> {}
setTimeout = extern "__setTimeout__"

connectFFI :: String -> (Connection -> Integer -> {}) -> {}
connectFFI = extern "madlibsqlite__connect"

connect :: String -> Wish SqliteError Connection
export connect = (path) => Wish(
  (bad, good) => {
    _db = Connection
    setTimeout(
      () => {
        connectFFI(
          path,
          (db, err) => {
            if (err > 0) {
              bad(SqliteError(err, `Failed to open '${path}'`))
            } else do {
              _db = db
              good(db)
            }
          },
        )
      },
      0,
    )

    return () => {
      disconnect(_db)
    }
  },
)


disconnect :: Connection -> {}
export disconnect = extern "madlibsqlite__disconnect"


queryFFI :: Connection -> String -> ((List (List SqliteValue)) -> {}) -> (Integer -> String -> {}) -> Integer
queryFFI = extern "madlibsqlite__query"

query :: Connection -> String -> Wish SqliteError (List (List SqliteValue))
export query = (db, sql) => Thread.create(
  (bad, good) => {
    queryFFI(
      db,
      sql,
      good,
      (errorCode, errorMessage) => {
        bad(SqliteError(errorCode, errorMessage))
      },
    )
  },
)
